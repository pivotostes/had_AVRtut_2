
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000012c  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c9  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000172  00000000  00000000  00000391  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c2  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000030  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main()
{
  // Configuração do timer1
  cli();  //Disable global interrupts
  80:	f8 94       	cli
  // Enable PCIE2 Bit3 = 1 (Port D)
  // Pin Change Interrupt Control Register
  PCICR |= (1<<PCIE2);
  82:	80 91 68 00 	lds	r24, 0x0068
  86:	84 60       	ori	r24, 0x04	; 4
  88:	80 93 68 00 	sts	0x0068, r24
  // Select PCINT23 Bit 7 = 1 (Port D7)
  PCMSK2 |= (1<<PCINT23) | (1<<PCINT18);
  8c:	80 91 6d 00 	lds	r24, 0x006D
  90:	84 68       	ori	r24, 0x84	; 132
  92:	80 93 6d 00 	sts	0x006D, r24

  //Setup the I/O for the LED
  DDRB = 0b00101000;    //Set PortB Pin5 and Pin3 as an output
  96:	88 e2       	ldi	r24, 0x28	; 40
  98:	84 b9       	out	0x04, r24	; 4
  PORTB = 0x00;   //Apaga os LEDS
  9a:	15 b8       	out	0x05, r1	; 5
  DDRD = 0x00;   //Set PortD as an input
  9c:	1a b8       	out	0x0a, r1	; 10
  PORTD = 0xFF;  //Enable pull-up resistors on PortD
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8b b9       	out	0x0b, r24	; 11
  sei();   // habilita interrupções globais
  a2:	78 94       	sei
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <main+0x24>

000000a6 <__vector_5>:
  while(1) {}  //Loop forever, interrupts do the restde v swe 
}

// Interrupt Service Routine
ISR(PCINT2_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31

  if (!tst_bit(PIND,PD7))
  bc:	4f 99       	sbic	0x09, 7	; 9
  be:	03 c0       	rjmp	.+6      	; 0xc6 <__vector_5+0x20>
  {
    cpl_bit(PORTB,PB5);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	90 e2       	ldi	r25, 0x20	; 32
  c4:	04 c0       	rjmp	.+8      	; 0xce <__vector_5+0x28>
  }
  else if (!tst_bit(PIND,PD2))
  c6:	4a 99       	sbic	0x09, 2	; 9
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <__vector_5+0x2c>
  {
    cpl_bit(PORTB,PB3);
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	98 e0       	ldi	r25, 0x08	; 8
  ce:	89 27       	eor	r24, r25
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	80 ed       	ldi	r24, 0xD0	; 208
  d4:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d6:	20 e9       	ldi	r18, 0x90	; 144
  d8:	31 e0       	ldi	r19, 0x01	; 1
  da:	f9 01       	movw	r30, r18
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <__vector_5+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e2:	d9 f7       	brne	.-10     	; 0xda <__vector_5+0x34>
  }
  _delay_ms(200);

}
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
